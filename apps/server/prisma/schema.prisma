generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  fullName     String
  username     String         @unique(map: "USERNAME_IDX")
  email        String         @unique(map: "EMAIL_IDX")
  password     String
  avatar       String?
  blogs        Blog[]
  comments     Comment[]
  likedBlog    LikedBlog[]
  likedComment LikedComment[]
  Bookmark     Bookmark[]
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt() @db.Timestamptz(6)

  @@map("users")
}

model Blog {
  id          Int         @id @default(autoincrement())
  slug        String      @unique(map: "SLUG_IDX")
  title       String      @unique(map: "TITLE_IDX")
  description String
  content     String
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  comments    Comment[]
  likedBlog   LikedBlog[]
  bookmark    Bookmark[]
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt() @db.Timestamptz(6)

  @@map("blogs")
}

model Comment {
  id              Int            @id @default(autoincrement())
  content         String
  blogId          Int
  userId          Int
  parentCommentId Int?
  user            User           @relation(fields: [userId], references: [id])
  blog            Blog           @relation(fields: [blogId], references: [id])
  parentComment   Comment?       @relation(name: "ParentChildren", fields: [parentCommentId], references: [id])
  childComments   Comment[]      @relation(name: "ParentChildren")
  likedComment    LikedComment[]
  createdAt       DateTime       @default(now()) @db.Timestamptz(6)

  @@map("comments")
}

model LikedBlog {
  userId    Int
  blogId    Int
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@id(name: "likeId", [userId, blogId])
  @@map("liked_blogs")
}

model LikedComment {
  userId    Int
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@id(name: "likeId", [userId, commentId])
  @@map("liked_comments")
}

model Bookmark {
  userId    Int
  blogId    Int
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@id(name: "bookmarkId", [userId, blogId])
  @@map("bookmarks")
}
